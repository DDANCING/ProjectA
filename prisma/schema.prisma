generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                       String                 @id @default(cuid())
  name                     String?
  email                    String?                @unique
  emailVerified            DateTime?              @map("email_verified")
  image                    String?
  password                 String?
  role                     UserRole               @default(USER)
  isTwoFactorEnabled       Boolean                @default(false)
  stripe_customer_id       String?
  stripe_subscription_item String?
  api_key                  String?
  twoFactorConfirmationId  String?
  Performace               Performace[]
  twoFactorConfirmation    TwoFactorConfirmation?
  accounts                 Account[]
  Scoreboard               Scoreboard?
  UserOverallProgress      UserOverallProgress[]

  @@map("users")
}

model Music {
  id             Int              @id @default(autoincrement())
  title          String
  artist         String
  youtubeLink    String
  tabs           String
  coverAlbum     String
  tuning         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  timeMinutes    Int
  timeSeconds    Int
  ExerciseModule ExerciseModule[]
  performace     Performace[]
}

model Performace {
  id        Int      @id @default(autoincrement())
  userId    String
  musicId   Int
  average   Int
  updatedAt DateTime @updatedAt
  music     Music    @relation(fields: [musicId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, musicId])
}

model Scoreboard {
  id           Int     @id @default(autoincrement())
  averagescore Int
  userId       String? @unique
  User         User?   @relation(fields: [userId], references: [id])

  @@map("scoreboards")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id             String           @id @default(uuid())
  userId         String
  title          String
  description    String?
  imageUrl       String?
  price          Float?
  isPublished    Boolean          @default(false)
  categoryId     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  activities     Activitie[]
  chapters       Chapter[]
  category       Category?        @relation(fields: [categoryId], references: [id])
  ExerciseModule ExerciseModule[]
  purchases      Purchase[]

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Activitie {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?
  videoUrl     String?
  position     Int
  isPublished  Boolean        @default(false)
  isFree       Boolean        @default(false)
  courseId     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id               String          @id @default(uuid())
  userId           String
  isCompleted      Boolean         @default(false)
  chapterId        String
  createdAt        DateTime        @default(now())
  exerciseModuleId Int?
  updatedAt        DateTime        @updatedAt
  chapter          Chapter         @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  ExerciseModule   ExerciseModule? @relation(fields: [exerciseModuleId], references: [id])

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model ExerciseModule {
  id                         Int                          @id @default(autoincrement())
  title                      String
  imageSrc                   String
  courseId                   String?
  musicId                    Int?
  course                     Course?                      @relation(fields: [courseId], references: [id])
  music                      Music?                       @relation(fields: [musicId], references: [id])
  units                      Unit[]
  userProgress               UserProgress[]
  UserProgressExerciseModule UserProgressExerciseModule[]
}

model Unit {
  id               Int            @id @default(autoincrement())
  title            String
  description      String
  order            Int
  exerciseModuleId Int
  lessons          Lesson[]
  exerciseId       ExerciseModule @relation(fields: [exerciseModuleId], references: [id])
}

model Lesson {
  id         Int         @id @default(autoincrement())
  title      String
  unitId     Int
  order      Int
  challenges Challenge[]
  unit       Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Challenge {
  id                Int                 @id @default(autoincrement())
  lessonId          Int
  type              ChallengeType
  question          String
  order             Int
  correctFrequency  Float?
  lesson            Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  challengeOptions  ChallengeOption[]
  challengeProgress ChallengeProgress[]
}

model ChallengeOption {
  id          Int       @id @default(autoincrement())
  challengeId Int
  text        String
  correct     Boolean
  imageSrc    String?
  audioSrc    String?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeProgress {
  id          Int       @id @default(autoincrement())
  userId      String
  challengeId Int
  completed   Boolean   @default(false)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model UserProgressExerciseModule {
  userId           String         @id
  userName         String         @default("User")
  userImageSrc     String         @default("/mascot.svg")
  hearts           Int            @default(5)
  points           Int            @default(0)
  exerciseModuleId Int
  activeExerciseId Int?
  activeExercise   ExerciseModule @relation(fields: [exerciseModuleId], references: [id])
}

model UserSubscription {
  id                     Int      @id @default(autoincrement())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ProgressGameMusic {
  id                Int      @id @default(autoincrement())
  userId            String
  gameMusicModuleId Int
  musicId           Int
  hearts            Int      @default(5)
  points            Int      @default(0)
  progressStatus    String   @default("in_progress") // Ex: in_progress, completed
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ProgressCourseModule {
  id             Int      @id @default(autoincrement())
  userId         String
  courseId       String
  userName       String
  userImageSrc   String
  isCompleted    Boolean  @default(false)
  points         Int      @default(0)
  progressStatus String   @default("in_progress")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, courseId])
}

model UserOverallProgress {
  id              String   @id @default(uuid())
  userId          String   @unique
  exercisePoints  Int      @default(0) // Pontos acumulados no módulo de exercício
  videoPoints     Int      @default(0) // Pontos acumulados no módulo de vídeo
  gameMusicPoints Int      @default(0) // Pontos acumulados no módulo de música
  averagePoints   Float    @default(0) // Média dos três módulos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_overall_progress")
}

enum ChallengeType {
  SELECT
  ASSIST
  AUDIO
}

enum UserRole {
  USER
  ADMIN
  TEACHER
  PROUSER
}
